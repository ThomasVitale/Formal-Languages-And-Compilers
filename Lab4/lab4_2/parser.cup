import java_cup.runtime.*;

parser code {:

	public static int error_found = 0;

    public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
				int line = (((Symbol)info).left)+1;
				int column = (((Symbol)info).right)+1;
				m.append("(line " + line + ", column " + column + ")");
			}
		}
		System.err.println(m);	
	}
	
	public void syntax_error(Symbol cur_token){}
	
	public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

:};

terminal INT_TYPE, DOUBLE_TYPE,
		 PRINT, IF, ELSE, WHILE,
		 RO, RC, SO, SC, BO, BC,
		 PLUS, MINUS, STAR, DIV, ASSIGN, S,
		 EQ, GREQ, GR, SMEQ, SM, AND, OR, NOT, CM,
		 INT, DOUBLE, ID,
		 UMINUS;

non terminal main,
			 decl_list, decl, type, var_list, var,
			 stmt_list, stmt, if, while, print, assignment,
			 id, index, expr, condition;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EQ, GREQ, GR, SMEQ, SM;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
precedence left UMINUS;

start with main;

main ::= decl_list stmt_list {: 
			if (parser.error_found == 1) {
				return null;
			}
			System.out.println("Programm correctly recognised"); 
		 :};

decl_list ::= decl_list decl | ;
decl ::= type var_list S | type error S {:
			parser.report_error("Declaration error\n", parser.getToken());
			parser.error_found = 1;
		 :};
type ::= INT_TYPE | DOUBLE_TYPE;
var_list ::= var_list CM var | var;
var ::= ID SO INT SC | ID;

stmt_list ::= stmt_list stmt | stmt | error stmt {:
			  	parser.report_error("Statement list error\n", parser.getToken());
				parser.error_found = 1;
			  :};
stmt ::= if | while | print | assignment | BO stmt_list BC 
		 | BO stmt_list error BC {:
		 	parser.report_error("Statement error: missing ';' before '}'\n", parser.getToken());
			parser.error_found = 1;
		 :}
		 | BO error BC {:
		 	parser.report_error("Statement error: missing ';' before '}'\n", parser.getToken());
			parser.error_found = 1;
		 :}
		 | error S {:
		 	parser.report_error("Statement error\n", parser.getToken());
			parser.error_found = 1;
		 :};

assignment ::= id S | id ASSIGN expr S 
			   | id ASSIGN error S {:
			   		parser.report_error("Assignment error: wrong expression\n", parser.getToken());
					parser.error_found = 1;
			   :}
			   | error ASSIGN expr S {:
			   		parser.report_error("Assignment error\n", parser.getToken());
					parser.error_found = 1;
			   :};
id ::= ID | ID SO index SC
	   | error SC {:
	   		parser.report_error("Vector error\n", parser.getToken());
			parser.error_found = 1;
	   :};
index ::= INT | ID;

if ::= IF condition stmt ELSE stmt | IF condition stmt
	   | IF condition stmt error stmt {:
	   		parser.report_error("If error: else missing\n", parser.getToken());
			parser.error_found = 1;
	   :};
while ::= WHILE condition stmt;
condition ::= RO expr RC
			  | RO error RC {:
			  	parser.report_error("Condition error\n", parser.getToken());
				parser.error_found = 1;
			  :}
			  | RO expr error {:
			  	parser.report_error("Condition error: ) missing\n", parser.getToken());
				parser.error_found = 1;
			  :}
			  | error expr RC {:
			  	parser.report_error("Condition error: ( missing\n", parser.getToken());
				parser.error_found = 1;
			  :};
print ::= PRINT id S
		  | PRINT error S {:
		  	parser.report_error("Print error\n", parser.getToken());
			parser.error_found = 1;
		  :};

expr ::=  expr AND expr
		| expr OR expr
		| expr NOT expr
		| expr EQ expr
		| expr GREQ expr
		| expr GR expr
		| expr SMEQ expr
		| expr SM expr
		| expr PLUS expr
		| expr MINUS expr
		| expr STAR expr
		| expr DIV expr
		| RO expr RC
		| id
		| INT
		| DOUBLE
		| MINUS INT %prec UMINUS
		| MINUS DOUBLE %prec UMINUS
		| RO error RC {:
		 	parser.report_error("Expression error\n", parser.getToken());
			parser.error_found = 1;
		 :}; 
		 
