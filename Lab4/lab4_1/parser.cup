import java_cup.runtime.*;

parser code {:

	public static int fact_found  = 0;
    public static int error_found = 0;

	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
				int line = (((Symbol)info).left)+1;
				int column = (((Symbol)info).right)+1;
				m.append("(line " + line + ", column " + column + ")");
			}
		}
		System.err.println(m);	
	}
	
	// public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
:}

terminal PT, CM, SEP_R, SEP_I, RO, RC,
		 ATOM, VARIABLE;

non terminal  program, element_list, interrogation,
			  element, fact, rule, predicate,
			  predicate_list, functor, arg_list, arg;

start with program;

program ::= element_list interrogation element_list {:
				if (parser.fact_found == 0 || parser.error_found == 1) {
					return null;
				}
				System.out.println("Program correctly recognized.");
			:};
			
element_list ::= element_list element | ;

element ::= fact | rule;

fact ::= predicate PT {:
		 	parser.fact_found = 1;
		 :}
		 | error PT {:
		 	parser.report_error("Fact error\n", parser.getToken());
		 	parser.error_found = 1;
		 :};

rule ::= predicate SEP_R predicate_list PT
		 | error SEP_R predicate_list PT {:
		 	parser.report_error("Rule error\n", parser.getToken());
		 	parser.error_found = 1;
		 :};

interrogation ::= SEP_I predicate_list PT {:
					System.out.println("Interrogation recognized.");
				  :}
				  | SEP_I error PT {:
				  	parser.report_error("Rule error\n", parser.getToken());
		 			parser.error_found = 1;
				  :};

predicate_list ::= predicate_list CM predicate | predicate;

predicate ::= functor arg_list RC | ATOM;

functor ::= ATOM RO;

arg_list ::= arg_list CM arg | arg;

arg ::= predicate | VARIABLE;


