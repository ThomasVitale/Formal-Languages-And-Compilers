import java_cup.runtime.*;
import java.util.HashMap;

init with {:
	symbol_table = new HashMap();
:};

parser code {:

	public HashMap symbol_table;

	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
				int line = (((Symbol)info).left)+1;
				int column = (((Symbol)info).right)+1;
				m.append("(line " + line + ", column " + column + ")");
			}
		}
		System.err.println(m);	
	}
	
:}


terminal CM, S, END, ASSIGN, RO, RC, SO, SC,
		 PLUS, MINUS, STAR, DIV, POWER, PT, UMINUS;		 
terminal Double REAL;
terminal Character SCALAR, VECTOR;

non terminal Object calculator, operation_list, operation;
non terminal Object scalar_assignment, vector_assignment;
non terminal Object scalar_operation, vector_operation;
non terminal Double scalar_expression, scalar;
non terminal Double[] vector_expression, vector;

precedence left PLUS, MINUS;
precedence left PT;
precedence left STAR, DIV;
precedence left POWER;
precedence left UMINUS;

start with calculator;

calculator ::= operation_list END;

operation_list ::= operation_list S operation | operation;

operation ::= scalar_assignment | vector_assignment | scalar_operation | vector_operation;

/* Assignments */
scalar_assignment ::= SCALAR:a ASSIGN scalar_expression:b {:
						parser.symbol_table.put(a, b);
						System.out.println("assignment: " + a + " <- " + b);
					  :};
vector_assignment ::= VECTOR:a ASSIGN vector_expression:b {:
						parser.symbol_table.put(a, b);
						System.out.println("assignment: " + a + " <- [" + b[0] + "," + b[1] + "]");
					  :}; 
					  
/* Operations */
scalar_operation ::= scalar_expression:e {:
						System.out.println("scalar expression: " + e.doubleValue());
					 :};					  

vector_operation ::= vector_expression:e {:
						System.out.println("vector expression: [" + e[0] + "," + e[1] + "]");
					 :};
					 
/* Scalar expression */
scalar_expression ::= scalar_expression:a PLUS scalar_expression:b {:
						RESULT = new Double(a.doubleValue() + b.doubleValue());
					  :}
					  | scalar_expression:a MINUS scalar_expression:b {:
							RESULT = new Double(a.doubleValue() - b.doubleValue());
					  :}
					  | scalar_expression:a STAR scalar_expression:b {:
							RESULT = new Double(a.doubleValue() * b.doubleValue());
					  :}
					  | scalar_expression:a DIV scalar_expression:b {:
							RESULT = new Double(a.doubleValue() / b.doubleValue());
					  :}
					  | scalar_expression:a POWER scalar_expression:b {:
							RESULT = new Double(Math.pow(a.doubleValue(), b.doubleValue()));
					  :}
					  | MINUS scalar_expression:a {:
							RESULT = new Double(-(a.doubleValue()));
					  :} %prec UMINUS
					  | RO scalar_expression:a RC {:
							RESULT = a;
					  :}
					  | vector_expression:a PT vector_expression:b {:
							RESULT = new Double(a[0].doubleValue() * b[0].doubleValue() + 
												a[1].doubleValue() * b[1].doubleValue());
					  :}
					  | scalar:a {:
							RESULT = a;
					  :};

/* Scalar */
scalar ::= REAL:a {:
		   		RESULT = a;
		   :}
		   | SCALAR:s {:
		   		RESULT = (Double)parser.symbol_table.get(s);
		   :};

/* Vector expression */
vector_expression ::= vector_expression:a PLUS vector_expression:b {:
						RESULT = new Double[2];
						RESULT[0] = new Double(a[0].doubleValue() + b[0].doubleValue());
						RESULT[1] = new Double(a[1].doubleValue() + b[1].doubleValue());
					  :}
					  | vector_expression:a MINUS vector_expression:b {:
					  	RESULT = new Double[2];
						RESULT[0] = new Double(a[0].doubleValue() - b[0].doubleValue());
						RESULT[1] = new Double(a[1].doubleValue() - b[1].doubleValue());
					  :}
					  | scalar_expression:s STAR vector_expression:v {:
					  	RESULT = new Double[2];
						RESULT[0] = new Double(s.doubleValue() * v[0].doubleValue());
						RESULT[1] = new Double(s.doubleValue() * v[1].doubleValue());
					  :}
					  | scalar_expression:s DIV vector_expression:v {:
					  	RESULT = new Double[2];
						RESULT[0] = new Double(s.doubleValue() / v[0].doubleValue());
						RESULT[1] = new Double(s.doubleValue() / v[1].doubleValue());
					  :}
					  | vector_expression:v STAR scalar_expression:s {:
					  	RESULT = new Double[2];
						RESULT[0] = new Double(s.doubleValue() * v[0].doubleValue());
						RESULT[1] = new Double(s.doubleValue() * v[1].doubleValue());
					  :}
					  | vector_expression:v DIV scalar_expression:s {:
					  	RESULT = new Double[2];
						RESULT[0] = new Double(s.doubleValue() / v[0].doubleValue());
						RESULT[1] = new Double(s.doubleValue() / v[1].doubleValue());
					  :}
					  | RO vector_expression:a RC {:
					  	RESULT = a;
					  :}
					  | vector:a {:
					  	RESULT = a;
					  :};

/* Vector */
vector ::= VECTOR:a {:
		   	RESULT = (Double[])parser.symbol_table.get(a);
		   :}
		   | SO scalar_expression:a CM scalar_expression:b SC {:
		   		RESULT = new Double[2];
		   		RESULT[0] = a;
		   		RESULT[1] = b;
		   :};
